// Generated by view binder compiler. Do not edit!
package com.kk4vcz.goodv.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.kk4vcz.goodv.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityHistoryBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button backButton;

  @NonNull
  public final Button clearButton;

  @NonNull
  public final ImageView diplayIcon;

  @NonNull
  public final TextView diplayText;

  @NonNull
  public final Button readButton;

  @NonNull
  public final RelativeLayout resultTitle;

  @NonNull
  public final ScrollView scroll;

  @NonNull
  public final TextView textView;

  private ActivityHistoryBinding(@NonNull RelativeLayout rootView, @NonNull Button backButton,
      @NonNull Button clearButton, @NonNull ImageView diplayIcon, @NonNull TextView diplayText,
      @NonNull Button readButton, @NonNull RelativeLayout resultTitle, @NonNull ScrollView scroll,
      @NonNull TextView textView) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.clearButton = clearButton;
    this.diplayIcon = diplayIcon;
    this.diplayText = diplayText;
    this.readButton = readButton;
    this.resultTitle = resultTitle;
    this.scroll = scroll;
    this.textView = textView;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backButton;
      Button backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.clearButton;
      Button clearButton = ViewBindings.findChildViewById(rootView, id);
      if (clearButton == null) {
        break missingId;
      }

      id = R.id.diplay_icon;
      ImageView diplayIcon = ViewBindings.findChildViewById(rootView, id);
      if (diplayIcon == null) {
        break missingId;
      }

      id = R.id.diplay_text;
      TextView diplayText = ViewBindings.findChildViewById(rootView, id);
      if (diplayText == null) {
        break missingId;
      }

      id = R.id.readButton;
      Button readButton = ViewBindings.findChildViewById(rootView, id);
      if (readButton == null) {
        break missingId;
      }

      id = R.id.result_title;
      RelativeLayout resultTitle = ViewBindings.findChildViewById(rootView, id);
      if (resultTitle == null) {
        break missingId;
      }

      id = R.id.scroll;
      ScrollView scroll = ViewBindings.findChildViewById(rootView, id);
      if (scroll == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      return new ActivityHistoryBinding((RelativeLayout) rootView, backButton, clearButton,
          diplayIcon, diplayText, readButton, resultTitle, scroll, textView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
